(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: 'World'"
p3
sS'layer'
p4
S'/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/applications/Assignment_2/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\ndef display():\n\tc=auth.user_id\n\tcateg=db(db.Category.id>0).select(db.Category.ALL)\n\treturn locals()\n\t\ndef categ_display():\n\tif(len(request.args)>1):\n\t\tmessage=request.args[1]\n\t\tresponse.flash=message\n\telse:\n\t\tresponse.flash=T("Welcome!")\n\tif auth.user:\n\t\tc1=int(auth.user_id)\n\telse:\n\t\tc1=None\n\tc=request.args[0]\n\tnews=db(db.Post.Category==c).select(orderby=~(db.Post.ranking))\n\treturn locals()\n\n@auth.requires_login()\ndef index():\n     \'auth\' in globals()\n     if auth.user:\n\t    c1=auth.user_id \n\t    response.flash=T("Welcome to web2py!")\n\t    if(c1==3):\n\t\t    redirect(URL(\'admin\'))\n\t    else:\n\t\t    redirect(URL(\'client\'))\n     return locals()\n@auth.requires_login()\ndef admin():\n\tif(auth.user_id!=3):\n\t\tresponse.flash=\'access denied\'\n\t\tredirect(URL(\'client\'))\n\t\'auth\' in globals()\n\tif auth.user:\n\t\treturn locals()\n@auth.requires_login()\ndef admin_userdel():\n\tif(auth.user_id!=3):\n\t\tresponse.flash=\'access denied\'\n\t\tredirect(URL(\'client\'))\n\tform=SQLFORM.factory(\n\t\t\tdb.Field(\'Userid\',\'integer\',db.auth_user,requires=IS_IN_DB(db,\'auth_user.id\',\'auth_user.first_name\'),label=\'Select name\'))\n\tif form.accepts(request.vars,session):\n\t\tsession.flash=\'User deleted!\'\n\t\tredirect(URL(r=request,f=\'delete_user?id=%d\' %int(form.vars.Userid)))\n\telif form.errors:\n\t\tresponse.flash=\'Errors in form\'\n\treturn dict(form=form)\n\t\n@auth.requires_login()\ndef delete_user():\n\tif(auth.user_id!=3):\n\t\tresponse.flash=\'access denied\'\n\t\tredirect(URL(\'client\'))\n\tuserid=int(request.vars.id)\n\tif(userid==3):\n\t\tresponse.flash=\'Admin can not be deleted!\'\n\t\tredirect(URL(\'admin_userdel\'))\n\tdb(db.auth_user.id==userid).delete()\n\tx=db(db.Like_post.userid==userid).select()\n\ty=db(db.Dislike.userid==userid).select()\n\tfor i in range(len(x)):\n\t\tdb(db.Post.id==x[i][\'postid\']).update(ranking=db.Post.ranking-5)\n\tfor i in range(len(y)):\n\t\tdb(db.Post.id==y[i][\'postid\']).update(ranking=db.Post.ranking+3)\n\tdb(db.Like_post.userid==userid).delete()\n\tdb(db.Dislike.userid==userid).delete()\n\tdb(db.Post.userid==userid).delete()\n\tdb(db.Comm.userid==userid).delete()\n\treturn locals()\n\n@auth.requires_login()\ndef del_post():\n\tc=int(request.args[0])\n\tc1=request.args[1]\n\tdb(db.Post.id == c).delete()\n\tredirect(URL("categ_display/"+c1+"/Postdeleted"))\n\treturn locals()\n\n@auth.requires_login()\ndef edit_post():\n\tdb.Post.ranking.readable=True\n\tdb.Post.userid.readable=True\n\tdb.Post.ranking.writable=False\n\tdb.Post.userid.writable=False\n\tdb.Post.Category.readable=True\n\tc=int(request.args[0])\n\tc1=request.args[1]\n\tform=SQLFORM(db.Post,c)\n\tif form.accepts(request.vars,session):\n\t\tresponse.flash=\'Post updated\'\n\t\tredirect(URL("categ_display/"+c1+"/Postedited"))\n\telif form.errors:\n\t\tresponse.flash=\'Errors in form\'\n\treturn dict(form=form)\n\n@auth.requires_login()\ndef like_post():\n\tc2=request.args[1]\n\tc1=auth.user_id\n\tc=int(request.args[0])\n\tdb(db.Like_post.postid==c and db.Like_post.userid==c1).delete()\n\tdb(db.Dislike.postid==c and db.Dislike.userid==c1).delete()\n\tdb.Like_post.insert(userid=c1,postid=c)\n\tx=db(db.Like_post.postid==c).select()\n\ty=db(c==db.Dislike.postid).select()\n\tdb(db.Post.id==c).update(ranking=100+len(x)*5-len(y)*3)\n\tredirect(URL("categ_display.html/"+c2+"/liked"))\n\treturn locals()\n\n@auth.requires_login()\ndef dislike_post():\n\tc2=request.args[1]\n\tc1=auth.user_id\n\tc=int(request.args[0])\n\tdb(db.Like_post.postid==c and db.Like_post.userid==c1).delete()\n\tdb(db.Dislike.postid==c and db.Dislike.userid==c1).delete()\n\tdb.Dislike.insert(userid=c1,postid=c)\n\tx=db(db.Like_post.postid==c).select()\n\ty=db(db.Dislike.postid==c).select()\n\tdb(db.Post.id==c).update(ranking=100+len(x)*5-len(y)*3)\n\tsession.flash=\'Post disliked\'\n\tredirect(URL("categ_display/"+c2+"/disliked"))\n\treturn locals()\n\n@auth.requires_login()\n\ndef comm_post():\n\tc2=request.args[1]\n\tc1=auth.user_id\n\tc=int(request.args[0])\n\tuser=db(db.auth_user.id==c1).select(db.auth_user.first_name)\n\tdb.Comm.cdate.default=request.now.date()\n\tdb.Comm.ctime.default=request.now\n\tcomments=db(db.Comm.postid==c).select()\n\tdb.Comm.ctime.readable=False\n\tdb.Comm.ctime.writable=False\n\tdb.Comm.cdate.readable=False\n\tdb.Comm.cdate.writable=False\n\tdb.Comm.userid.readable=False\n\tdb.Comm.userid.writable=False\n\tdb.Comm.postid.readable=False\n\tdb.Comm.postid.writable=False\n\tdb.Comm.userid.default=c1\n\tdb.Comm.postid.default=c\n\tform=SQLFORM(db.Comm)\n\tif form.accepts(request.vars,session):\n\t\tsession.flash=\'Commented on post!\'\n\t\tredirect(URL("categ_display/"+c2+"/commented"))\n\telif form.errors:\n\t\tresponse.flash(\'Errors in form\')\n\treturn locals()\n\n@auth.requires_login()\ndef category():\n\t\'auth\' in globals()\n\tif auth.user:\n\t\tform=SQLFORM(db.Category)\n\t\tif form.process().accepted:\n\t\t\tresponse.flash=\'form accepted\'\n\t\telif form.errors:\n\t\t\tresponse.flash=\'form has errors\'\n\t\treturn dict(form=form)\n\n@auth.requires_login()\ndef client():\n\treturn locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n@auth.requires_login()\ndef post():\n\tc=auth.user_id\n\tdb.Post.pdate.default=request.now.date()\n\tdb.Post.ptime.default=request.now\n\tdb.Post.userid.default=c\n\tdb.Post.userid.readable=False\n\tdb.Post.userid.writable=False\n\tdb.Post.ptime.readable=False\n\tdb.Post.ptime.writable=False\n\tdb.Post.pdate.readable=False\n\tdb.Post.pdate.writable=False\n\tdb.Post.ranking.default=100\n\tdb.Post.ranking.readable=False\n\tdb.Post.ranking.writable=False\n\tform=SQLFORM(db.Post)\n\tif form.process().accepted:\n\t\tresponse.flash=\'form accepted\'\n\telif form.errors:\n\t\tresponse.flash=\'form has errors\'\n\treturn locals()\n\ndef download():\n\treturn response.download(request, db)\n\n\ndef call():\n    """\n\n\tdb.Post.userid.default=c\n\tdb.Post.userid.readable=False\n\tdb.Post.userid.writable=False\n\tdb.Post.ranking.default=100\n\tdb.Post.ranking.readable=False\n\tdb.Post.ranking.writable=False\n\tform=SQLFORM(db.Post)\n\tif form.process().accepted:\n\t\tresponse.flash=\'form accepted\'\n\telif form.errors:\n\t\tresponse.flash=\'form has errors\'\n\treturn dict(form=form)\n    """\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(category)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/applications/Assignment_2/controllers/default.py", line 275, in <module>\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/tools.py", line 2929, in f\n    return action(*a, **b)\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/applications/Assignment_2/controllers/default.py", line 172, in category\n    if form.process().accepted:\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/html.py", line 2179, in process\n    self.validate(**kwargs)\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/html.py", line 2118, in validate\n    if self.accepts(**kwargs):\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/sqlhtml.py", line 1291, in accepts\n    **kwargs\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/html.py", line 2001, in accepts\n    status = self._traverse(status, hideerror)\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/html.py", line 847, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/html.py", line 847, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/html.py", line 847, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/html.py", line 847, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/html.py", line 854, in _traverse\n    newstatus = self._validate()\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/html.py", line 1750, in _validate\n    (value, errors) = validator(value)\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/validators.py", line 589, in __call__\n    rows = self.dbset(field == value, ignore_common_filters=self.ignore_common_filters).select(limitby=(0, 1))\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/dal.py", line 8905, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/dal.py", line 2146, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/dal.py", line 1618, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/dal.py", line 1478, in _select\n    sql_w = \' WHERE \' + self.expand(query)\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/dal.py", line 1311, in expand\n    return op(first, second)\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/dal.py", line 1239, in EQ\n    self.expand(second, first.type))\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/dal.py", line 1321, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/shipra/Desktop/Semester 1.2/ITWS-2/web2py/gluon/dal.py", line 1746, in represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'World\'\n'
p11
s.